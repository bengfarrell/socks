{"version":3,"file":"eventemitter.js","sourceRoot":"","sources":["eventemitter.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,YAAY;IAAzB;QACc,cAAS,GAA2C,EAAE,CAAC;IA+CrE,CAAC;IA7CG;;OAEG;IACH,gBAAgB,CAAC,IAAY,EAAE,QAAkB;QAC7C,MAAM,QAAQ,GAAyC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;QAC1E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,mBAAmB,CAAC,QAA8C;QAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;gBAChC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC5B,OAAO;aACV;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,oBAAoB,CAAC,SAAiD;QAClE,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC3B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,CAAQ;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACzC,SAAS,CAAC,OAAO,CAAC,UAAS,CAAC;YACxB,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;gBACnB,aAAa;gBACb,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["export class EventEmitter {\n    protected listeners: { type: string, callback: Function }[] = [];\n\n    /**\n     * aAdd event listener.\n     */\n    addEventListener(type: string, callback: Function) {\n        const listener: { type: string, callback: Function } = { type, callback };\n        this.listeners.push(listener);\n        return listener;\n    }\n\n    /**\n     * Remove event listener.\n     * @param listener - Event listener to remove.\n     */\n    removeEventListener(listener: { type: string, callback: Function }) {\n        for (let c = 0; c < this.listeners.length; c++) {\n            if (listener === this.listeners[c]) {\n                this.listeners.splice(c, 1);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Remove event listeners.\n     * @param listeners - List of event listeners to remove.\n     */\n    removeEventListeners(listeners: { type: string, callback: Function }[]) {\n        listeners.forEach((listener) => {\n            this.removeEventListener(listener);\n        });\n    }\n\n    /**\n     * Trigger event.\n     * @param event to dispatch\n     */\n    dispatchEvent(e: Event) {\n        const listeners = this.listeners.slice();\n        listeners.forEach(function(l) {\n            if (e.type === l.type) {\n                // @ts-ignore\n                l.callback.apply(this, [e]);\n            }\n        });\n    }\n}\n"]}