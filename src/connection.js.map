{"version":3,"file":"connection.js","sourceRoot":"","sources":["connection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,MAAM,OAAO,UAAW,SAAQ,YAAY;IASxC,YAAY,OAAe,UAAU,CAAC,YAAY,EAAE,OAAe,UAAU,CAAC,YAAY;QACtF,KAAK,EAAE,CAAC;QALL,cAAS,GAAY,KAAK,CAAC;QAM9B,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAQ,CAAC,CAAC;QAC5F,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAQ,CAAC,CAAC;QAC9F,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAQ,CAAC,CAAC;QACpF,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,CAAe,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAQ,CAAC,CAAC;IAC7F,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAES,sBAAsB,CAAC,CAAQ;QACrC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAES,uBAAuB,CAAC,CAAQ;QACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAES,aAAa,CAAC,CAAQ;QAC5B,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED,SAAS,CAAC,KAAmB;QACzB,IAAI,CAAC,aAAa,CAAC,IAAI,YAAY,CAAC,YAAY,CAAC,eAAe,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/I,CAAC;IAED,IAAI,CAAC,QAA2C;QAC5C,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAA;aAC7C;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;aAC/C;SACJ;IACL,CAAC;;AAhDa,uBAAY,GAAW,WAAW,CAAC;AAEnC,uBAAY,GAAW,IAAI,CAAC","sourcesContent":["import { BlenderEvent } from './blender-event';\nimport { BlenderCommand } from './blender-command'\nimport { EventEmitter } from './eventemitter';\n\nexport class Connection extends EventEmitter {\n    public static DEFAULT_HOST: string = 'localhost';\n\n    public static DEFAULT_PORT: number = 8138;\n\n    public connected: boolean = false;\n\n    protected socket: WebSocket;\n\n    constructor(host: string = Connection.DEFAULT_HOST, port: number = Connection.DEFAULT_PORT) {\n        super();\n        this.socket = new WebSocket(`ws://${host}:${port}`);\n        this.socket.addEventListener('open', ((e: Event) => this.onOpenSocketConnection(e)) as any);\n        this.socket.addEventListener('close', ((e: Event) => this.onCloseSocketConnection(e)) as any);\n        this.socket.addEventListener('error', ((e: Event) => this.onSocketError(e)) as any);\n        this.socket.addEventListener('message', ((e: MessageEvent) => this.onMessage(e)) as any);\n    }\n\n    public close() {\n        this.connected = false;\n        this.socket.close();\n    }\n\n    protected onOpenSocketConnection(e: Event) {\n        this.connected = true;\n        this.dispatchEvent(e);\n    }\n\n    protected onCloseSocketConnection(e: Event) {\n        this.connected = false;\n        this.dispatchEvent(e);\n    }\n\n    protected onSocketError(e: Event) {\n        this.dispatchEvent(e);\n    }\n\n    onMessage(event: MessageEvent) {\n        this.dispatchEvent(new BlenderEvent(BlenderEvent.BLENDER_MESSAGE,{ bubbles: true, composed: true, cancellable: true, scene: event.data }));\n    }\n\n    send(commands: BlenderCommand | BlenderCommand[]) {\n        if (this.connected) {\n            if (Array.isArray(commands)) {\n                this.socket.send(JSON.stringify(commands))\n            } else {\n                this.socket.send(JSON.stringify([commands]))\n            }\n        }\n    }\n}\n"]}